[build-system]
requires = ["hatchling >=1.5"]
build-backend = "hatchling.build"

[project]
name = "nbconvert"
authors = [{name = "Jupyter Development Team", email = "jupyter@googlegroups.com"}]
license = {file = "LICENSE"}
description = """Converting Jupyter Notebooks (.ipynb files) to other formats.

Output formats include asciidoc, html, latex, markdown, pdf, py, rst, script.

nbconvert can be used both as a Python library (`import nbconvert`)
or as a command line tool (invoked as `jupyter nbconvert ...`).
"""
readme = "README.md"
keywords = ["Interactive", "Interpreter", "Shell", "Web"]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
urls = {Homepage = "https://jupyter.org"}
requires-python = ">=3.8"
dependencies = [
    "beautifulsoup4",
    "bleach[css]!=5.0.0",
    "defusedxml",
    "importlib_metadata>=3.6;python_version<\"3.10\"",
    "jinja2>=3.0",
    "jupyter_core>=4.7",
    "jupyterlab_pygments",
    "MarkupSafe>=2.0",
    "mistune>=2.0.3,<4",
    "nbclient>=0.5.0",
    "nbformat>=5.7",
    "packaging",
    "pandocfilters>=1.4.1",
    "pygments>=2.4.1",
    "traitlets>=5.1",
]
dynamic = ["version"]

[project.entry-points."nbconvert.exporters"]
custom = "nbconvert.exporters:TemplateExporter"
html = "nbconvert.exporters:HTMLExporter"
slides = "nbconvert.exporters:SlidesExporter"
latex = "nbconvert.exporters:LatexExporter"
pdf = "nbconvert.exporters:PDFExporter"
qtpdf = "nbconvert.exporters:QtPDFExporter"
qtpng = "nbconvert.exporters:QtPNGExporter"
webpdf = "nbconvert.exporters:WebPDFExporter"
markdown = "nbconvert.exporters:MarkdownExporter"
python = "nbconvert.exporters:PythonExporter"
rst = "nbconvert.exporters:RSTExporter"
notebook = "nbconvert.exporters:NotebookExporter"
asciidoc = "nbconvert.exporters:ASCIIDocExporter"
script = "nbconvert.exporters:ScriptExporter"

[project.optional-dependencies]
qtpng = ["pyqtwebengine>=5.15"]
qtpdf = ["nbconvert[qtpng]"]
webpdf = ["playwright"]
test = [
    "pytest>=7",
    "ipykernel",
    "ipywidgets>=7.5",
    "flaky",
]
serve = ["tornado>=6.1"]
docs = [
    "myst_parser",
    "sphinx==5.0.2",
    "pydata_sphinx_theme",
    "nbsphinx>=0.2.12",
    "ipython",
    "ipykernel",
    "sphinxcontrib_spelling",
]
all = ["nbconvert[qtpdf,webpdf,test,serve,docs]"]

[project.scripts]
jupyter-nbconvert = "nbconvert.nbconvertapp:main"
jupyter-dejavu = "nbconvert.nbconvertapp:dejavu_main"

[tool.hatch.version]
path = "nbconvert/_version.py"

# Used to call hatch_build.py
[tool.hatch.build.hooks.custom]

[tool.hatch.build.targets.sdist]
artifacts = ["share/templates", "tests"]

[tool.hatch.build.targets.wheel.shared-data]
"share/templates" = "share/jupyter/nbconvert/templates"

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["all"]
dependencies = ["coverage[toml]", "pytest-cov"]
[tool.hatch.envs.cov.scripts]
test = "python -m pytest -vv --cov nbconvert --cov-branch --cov-report term-missing:skip-covered {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.lint]
detached = true
dependencies = ["pre-commit"]
[tool.hatch.envs.lint.scripts]
build = [
  "pre-commit run --all-files ruff",
  "pre-commit run --all-files ruff-format",
]

[tool.hatch.envs.typing]
dependencies = [ "pre-commit"]
detached = true
[tool.hatch.envs.typing.scripts]
test = "pre-commit run --all-files --hook-stage manual mypy"

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-ra", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config",
   "--ignore=tests/files/jupyter_nbconvert_config.py",
   "--ignore=tests/files/override.py",
]
markers = "network: marks tests which require network connection"
testpaths = [
    "tests/"
]
filterwarnings = [
    "error",
    "ignore:nbconvert.utils.lexers is deprecated as of 5.0:UserWarning",
    # https://github.com/pyppeteer/pyppeteer/issues/342
    "ignore:remove loop argument:DeprecationWarning:websockets",
    # https://github.com/mhammond/pywin32/issues/1802
    "ignore:getargs.*format is deprecated:DeprecationWarning",
    # From jupyter_client
    "ignore:unclosed <socket.socket:ResourceWarning",
    "ignore:There is no current event loop:DeprecationWarning",
    "ignore:unclosed event loop:ResourceWarning",
    # From jupyter_core
    "module:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
    # From dateutil
    "ignore:.*Use timezone-aware objects to represent datetimes in UTC:DeprecationWarning",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
"@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
relative_files = true
source = ["nbconvert"]

[tool.mypy]
files = "nbconvert"
python_version = "3.8"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["no-untyped-def", "no-untyped-call"]
warn_unreachable = true

[tool.ruff]
line-length = 100

[tool.ruff.format]
exclude = [".*notebook1.ipynb$"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  #"PTH",         # flake8-use-pathlib
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
  "S",           # flake8-bandit
]
ignore = [
  "PLR",    # Design related pylint codes
  "S101",   # Use of `assert` detected
  "SIM105", # Use `contextlib.suppress(...)`
  "T201",   # `print` found
  "RUF012", # Mutable class attributes should be annotated
  "UP031",  # Use format specifiers instead of percent format
]
unfixable = [
  "T201",   # Don't touch print statements
  "RUF100", # Don't touch noqa lines
  "F401",    # Unused imports
]

[tool.ruff.lint.per-file-ignores]
# F841 local variable 'foo' is assigned to but never used
# S101 Use of `assert` detected
# TID252 Relative imports from parent modules are banned
# PT009 Use a regular `assert` instead of unittest-style
# PGH003 Use specific rule codes when ignoring type issues
# PT027 Use `pytest.raises` instead of unittest-style
# PGH004 Use specific rule codes when using `noqa`
"tests/*" = ["F841", "S101", "TID252", "PT009", "PTH", "PGH003", "PT027",
              "PGH004"]
"tests/*/*.ipynb" = [
  "EM", "B018", "E402", "F405", "SIM", "F403", "F821",
  "RUF100", "ICN001", "S605", "S607"
]
"docs/*/*.ipynb" = ["S310", "EM", "B018", "E402", "F405", "SIM", "F811", "N816","E741"]
# F401 'foo' imported but unused
# F403 'x' used; unable to detect undefined names
"nbconvert/*/__init__.py" = ["F401", "F403"]
"nbconvert/__init__.py" = ["F401", "F403"]
# PLR2004 Magic value used in comparison
"nbconvert/filters/ansi.py" = ["PLR2004"]
"tests/exporters/test_html.py" = ["RUF001"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["tests", "docs"]

[tool.repo-review]
ignore = ["GH102"]


[tool.codespell]
skip = "*.ipynb,*.css,*.tex.j2,*iso639_1.py,*html.j2,*test_ansi.py"
